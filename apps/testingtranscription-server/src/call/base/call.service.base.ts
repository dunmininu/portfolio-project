/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Call as PrismaCall } from "@prisma/client";

export class CallServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CallCountArgs, "select">): Promise<number> {
    return this.prisma.call.count(args);
  }

  async calls<T extends Prisma.CallFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CallFindManyArgs>
  ): Promise<PrismaCall[]> {
    return this.prisma.call.findMany<Prisma.CallFindManyArgs>(args);
  }
  async call<T extends Prisma.CallFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CallFindUniqueArgs>
  ): Promise<PrismaCall | null> {
    return this.prisma.call.findUnique(args);
  }
  async createCall<T extends Prisma.CallCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CallCreateArgs>
  ): Promise<PrismaCall> {
    return this.prisma.call.create<T>(args);
  }
  async updateCall<T extends Prisma.CallUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CallUpdateArgs>
  ): Promise<PrismaCall> {
    return this.prisma.call.update<T>(args);
  }
  async deleteCall<T extends Prisma.CallDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CallDeleteArgs>
  ): Promise<PrismaCall> {
    return this.prisma.call.delete(args);
  }
}
