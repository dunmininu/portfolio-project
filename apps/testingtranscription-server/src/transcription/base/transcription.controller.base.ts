/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TranscriptionService } from "../transcription.service";
import { TranscriptionCreateInput } from "./TranscriptionCreateInput";
import { Transcription } from "./Transcription";
import { TranscriptionFindManyArgs } from "./TranscriptionFindManyArgs";
import { TranscriptionWhereUniqueInput } from "./TranscriptionWhereUniqueInput";
import { TranscriptionUpdateInput } from "./TranscriptionUpdateInput";

export class TranscriptionControllerBase {
  constructor(protected readonly service: TranscriptionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Transcription })
  async createTranscription(
    @common.Body() data: TranscriptionCreateInput
  ): Promise<Transcription> {
    return await this.service.createTranscription({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Transcription] })
  @ApiNestedQuery(TranscriptionFindManyArgs)
  async transcriptions(
    @common.Req() request: Request
  ): Promise<Transcription[]> {
    const args = plainToClass(TranscriptionFindManyArgs, request.query);
    return this.service.transcriptions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Transcription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async transcription(
    @common.Param() params: TranscriptionWhereUniqueInput
  ): Promise<Transcription | null> {
    const result = await this.service.transcription({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Transcription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTranscription(
    @common.Param() params: TranscriptionWhereUniqueInput,
    @common.Body() data: TranscriptionUpdateInput
  ): Promise<Transcription | null> {
    try {
      return await this.service.updateTranscription({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Transcription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTranscription(
    @common.Param() params: TranscriptionWhereUniqueInput
  ): Promise<Transcription | null> {
    try {
      return await this.service.deleteTranscription({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
