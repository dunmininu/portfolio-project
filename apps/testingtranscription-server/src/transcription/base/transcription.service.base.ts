/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Transcription as PrismaTranscription } from "@prisma/client";

export class TranscriptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TranscriptionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.transcription.count(args);
  }

  async transcriptions<T extends Prisma.TranscriptionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TranscriptionFindManyArgs>
  ): Promise<PrismaTranscription[]> {
    return this.prisma.transcription.findMany<Prisma.TranscriptionFindManyArgs>(
      args
    );
  }
  async transcription<T extends Prisma.TranscriptionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TranscriptionFindUniqueArgs>
  ): Promise<PrismaTranscription | null> {
    return this.prisma.transcription.findUnique(args);
  }
  async createTranscription<T extends Prisma.TranscriptionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TranscriptionCreateArgs>
  ): Promise<PrismaTranscription> {
    return this.prisma.transcription.create<T>(args);
  }
  async updateTranscription<T extends Prisma.TranscriptionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TranscriptionUpdateArgs>
  ): Promise<PrismaTranscription> {
    return this.prisma.transcription.update<T>(args);
  }
  async deleteTranscription<T extends Prisma.TranscriptionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TranscriptionDeleteArgs>
  ): Promise<PrismaTranscription> {
    return this.prisma.transcription.delete(args);
  }
}
