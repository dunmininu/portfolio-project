/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Transcription as PrismaTranscription } from "@prisma/client";

export class TranscriptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TranscriptionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.transcription.count(args);
  }

  async transcriptions(
    args: Prisma.TranscriptionFindManyArgs
  ): Promise<PrismaTranscription[]> {
    return this.prisma.transcription.findMany(args);
  }
  async transcription(
    args: Prisma.TranscriptionFindUniqueArgs
  ): Promise<PrismaTranscription | null> {
    return this.prisma.transcription.findUnique(args);
  }
  async createTranscription(
    args: Prisma.TranscriptionCreateArgs
  ): Promise<PrismaTranscription> {
    return this.prisma.transcription.create(args);
  }
  async updateTranscription(
    args: Prisma.TranscriptionUpdateArgs
  ): Promise<PrismaTranscription> {
    return this.prisma.transcription.update(args);
  }
  async deleteTranscription(
    args: Prisma.TranscriptionDeleteArgs
  ): Promise<PrismaTranscription> {
    return this.prisma.transcription.delete(args);
  }
}
